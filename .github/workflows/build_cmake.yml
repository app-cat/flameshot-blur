name: Building(CMake)

on:
  push:
    branches: [ master ]
    paths-ignore:
      - 'README.md'
      - 'LICENSE'
  pull_request:
    branches: [ master ]
    paths-ignore:
      - 'README.md'
      - 'LICENSE'

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: RelWithDebInfo

jobs:
  linux-build:
    name: ${{ matrix.os}}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [debian-11]

    steps:
      - name: Checkout Source code
        if: github.event_name == 'push'
        uses: actions/checkout@v2

      - name: Checkout Source code
        if: github.event_name == 'pull_request'
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Install Dependencies
        run: |
          sudo apt-get -y -qq update
          sudo apt-get -y --no-install-recommends install \
            cmake \
            extra-cmake-modules \
            build-essential \
            qt5-default \
            qttools5-dev-tools \
            qttools5-dev \
            libqt5dbus5 \
            libqt5network5 \
            libqt5core5a \
            libqt5widgets5 \
            libqt5gui5 \
            libqt5svg5-dev

      - name: Create Build Environment
        # Some projects don't allow in-source building, so create a separate build directory
        # We'll use this as our working directory for all subsequent commands
        run: cmake -E make_directory ${{runner.workspace}}/build

      - name: Configure CMake
        # Use a bash shell so we can use the same syntax for environment variable
        # access regardless of the host operating system
        shell: bash
        working-directory: ${{runner.workspace}}/build
        # Note the current convention is to use the -S and -B options here to specify source
        # and build directories, but this is only available with CMake 3.13 and higher.
        # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
        #
        # We need to source the profile file to make sure conan is in PATH
        run: |
          cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE
      - name: Build
        working-directory: ${{runner.workspace}}/build
        shell: bash
        # Execute the build.  You can specify a specific target with "--target <NAME>"
        run: cmake --build . --config $BUILD_TYPE

      - name: Test
        working-directory: ${{runner.workspace}}/build
        shell: bash
        # Execute tests defined by the CMake configuration.
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: ctest -C $BUILD_TYPE
